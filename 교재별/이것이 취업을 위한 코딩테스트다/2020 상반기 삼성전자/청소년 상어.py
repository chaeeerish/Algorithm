import copy
import math

공간 = [[] * 4 for _ in range(4)]
물고기_리스트 = []

for i in range(4):
    data = list(map(int, input().split()))
    for j in [0, 2, 4, 6]:
        공간[i].append((data[j], data[j + 1]))
        물고기_리스트.append((i, j, data[j], data[j + 1])) # x y 물고기크기 물고기방향
물고기_리스트.sort(key=lambda x:x[2])

# 1, 2, 3, 4, 5, 6, 7, 8
# ↑, ↖, ←, ↙, ↓, ↘, →, ↗


def 다음_물고기(공간, 현재_물고기_크기):
    다음_물고기_위치 = (-1, -1)
    다음_물고기_크기 = math.inf
    for i in range(4):
        for j in range(4):
            if 공간[i][j][0] > 현재_물고기_크기:
                if 다음_물고기_크기 > 공간[i][j][0]:
                    다음_물고기_위치 = (i, j)
                    다음_물고기_크기 = 공간[i][j][0]

    return 다음_물고기_위치


def 해당_물고기_이동(공간, 물고기, 상어_현재_위치):
    dx = [0, -1, -1, 0, 1, 1, 1, 0, -1]
    dy = [0, 0, -1, -1, -1, 0, 1, 1, 1]

    현재_방향 = 물고기[3]
    현재_위치 = (물고기[0], 물고기[1])
    현재_크기 = 물고기[2]

    new공간 = copy.deepcopy(공간)
    for _ in range(9):
        if 현재_방향 == 0:
            continue
        if 현재_방향 == 9:
            현재_방향 = 1

        다음_위치_x = 현재_위치[0] + dx[현재_방향]
        다음_위치_y = 현재_위치[1] + dy[현재_방향]
        if 0 <= 다음_위치_x < 4 and 0 <= 다음_위치_y < 4 and (다음_위치_x, 다음_위치_y) != 상어_현재_위치:
            new공간[물고기[0]][물고기[1]] = (new공간[다음_위치_x][다음_위치_y][0], new공간[다음_위치_x][다음_위치_y][1])
            new공간[다음_위치_x][다음_위치_y] = (현재_크기, 현재_방향)
            break
        현재_방향 += 1
    return new공간


def 물고기_이동(공간, 물고기_개수, 상어_현재_위치):
    # 물고기 이동
    물고기_현재_크기 = 0
    cnt = 0
    while True:
        cnt += 1
        if cnt > 물고기_개수:
            break

        물고기_다음_위치 = 다음_물고기(공간, 물고기_현재_크기)
        물고기_현재_크기 = 공간[물고기_다음_위치[0]][물고기_다음_위치[1]][0]
        공간 = 해당_물고기_이동(공간, (물고기_다음_위치[0], 물고기_다음_위치[1], 공간[물고기_다음_위치[0]][물고기_다음_위치[1]][0], 공간[물고기_다음_위치[0]][물고기_다음_위치[1]][1]), 상어_현재_위치)
    return 공간


def 프린트_공간(공간):
    for i in range(len(공간)):
        for j in range(len(공간)):
            print(공간[i][j][0], end=" ")
            print("(" + str(공간[i][j][1]) + ")", end=" ")
        print()


def 상어가_먹을_물고기(공간, 상어_현재_위치, 상어_현재_방향):
    dx = [0, -1, -1, 0, 1, 1, 1, 0, -1]
    dy = [0, 0, -1, -1, -1, 0, 1, 1, 1]

    nx = 상어_현재_위치[0]
    ny = 상어_현재_위치[1]

    상어가_먹을_물고기 = []
    while True:
        nx = nx + dx[상어_현재_방향]
        ny = ny + dy[상어_현재_방향]
        if nx < 0 or nx >= len(공간) or ny < 0 or ny >= len(공간):
            break
        if 공간[nx][ny][0] != 0:
            상어가_먹을_물고기.append((nx, ny))

    return 상어가_먹을_물고기


def 상어가_물고기를_먹는다(공간, 다음_상어_위치):
    new공간 = copy.deepcopy(공간)
    new공간[다음_상어_위치[0]][다음_상어_위치[1]] = (0, 공간[다음_상어_위치[0]][다음_상어_위치[1]][1])
    return new공간


def 상어_이동_재귀_함수(공간, 상어_현재_위치, 상어_먹음, 상어_현재_방향, 물고기_개수):
    new공간 = 물고기_이동(공간, 물고기_개수 - 1, 상어_현재_위치)
    상어가_먹을_물고기_리스트 = 상어가_먹을_물고기(new공간, 상어_현재_위치, 상어_현재_방향)
    if len(상어가_먹을_물고기_리스트) == 0:
        return 상어_먹음

    최대_상어_먹음 = []
    for 다음_상어_위치 in 상어가_먹을_물고기_리스트:
        최대_상어_먹음.append(상어_이동_재귀_함수(상어가_물고기를_먹는다(new공간, 다음_상어_위치), 다음_상어_위치, 상어_먹음 + new공간[다음_상어_위치[0]][다음_상어_위치[1]][0], new공간[다음_상어_위치[0]][다음_상어_위치[1]][1], 물고기_개수 - 1))

    return max(최대_상어_먹음)


상어_먹음 = 공간[0][0][0]
공간[0][0] = (0, 공간[0][0][1])
print(상어_이동_재귀_함수(공간, (0, 0), 상어_먹음, 공간[0][0][1], 16))

"""
# 33
7 6 2 3 15 6 9 8
3 1 1 8 14 7 10 1
6 1 13 6 4 3 11 4
16 1 8 7 5 2 12 2
"""