import math
from collections import deque
import heapq

n = int(input())

공간 = []
for _ in range(n):
    공간.append(list(map(int, input().split())))

현재_위치 = (-1, -1)
상어_사이즈 = 2
물고기_리스트 = []
for i in range(n):
    for j in range(n):
        if 공간[i][j] == 9:
            현재_위치 = (i, j)
        elif 공간[i][j] != 0:
            heapq.heappush(물고기_리스트, (공간[i][j], i, j))
공간[현재_위치[0]][현재_위치[1]] = 0

def 다음_위치_선정하기(공간, 현재_위치, 상어_사이즈):
    q = deque()
    q.appendleft((0, 현재_위치[0], 현재_위치[1]))

    dx = [0, -1, 0, 1]
    dy = [-1, 0, 1, 0]
    visited = [[False] * n for _ in range(n)]

    dist, x, y = 0, 현재_위치[0], 현재_위치[1]
    candidate = []
    while q:
        dist, x, y = q.popleft()
        visited[x][y] = True
        if 공간[x][y] != 0 and 공간[x][y] < 상어_사이즈:
            candidate.append((dist, x, y))

        dist += 1
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < len(공간) and 0 <= ny < len(공간) and 공간[nx][ny] <= 상어_사이즈 and not visited[nx][ny] and (dist, nx, ny) not in q:
                q.append((dist, nx, ny))

    if len(candidate) == 0:
        return -1, -1, -1

    candidate.sort(key=lambda x:(x[0], x[1], x[2]))
    return candidate[0]

time = 0
count = 0
while True:
    거리, 다음_위치_x, 다음_위치_y = 다음_위치_선정하기(공간, 현재_위치, 상어_사이즈)
    if 거리 == -1:
        break

    time += 거리
    공간[다음_위치_x][다음_위치_y] = 0
    현재_위치 = (다음_위치_x, 다음_위치_y)

    count += 1
    if count >= 상어_사이즈:
        count -= 상어_사이즈
        상어_사이즈 += 1

print(time)

"""
# 0
3
0 0 0
0 0 0
0 9 0

# 3
3
0 0 1
0 0 0
0 9 0

# 14
4
4 3 2 1
0 0 0 0     
0 0 9 0
1 2 3 4

# 60
6
5 4 3 2 3 4
4 3 2 3 4 5
3 2 9 5 6 6
2 1 2 3 4 5
3 2 1 6 5 4
6 6 6 6 6 6

# 48
6
6 0 6 0 6 1
0 0 0 0 0 2
2 3 4 5 6 6
0 0 0 0 0 2
0 2 0 0 0 0
3 9 3 0 0 1

# 39
6
1 1 1 1 1 1
2 2 6 2 2 3
2 2 5 2 2 3
2 2 2 4 6 3
0 0 0 0 0 6
0 0 0 0 0 9

# 67
7
3 5 0 6 4 5 5
1 6 3 3 0 2 2
6 2 1 3 1 5 1
9 2 2 3 4 2 3
2 1 6 2 0 0 4
4 5 0 6 1 1 0
5 4 3 2 1 4 0

# 59
7
2 0 6 1 2 4 1
2 0 0 0 1 6 1
3 5 1 0 2 5 0
3 0 0 9 1 0 4
6 1 1 0 2 1 6
0 0 4 0 4 1 2
5 0 0 0 4 0 2

# 5
7
0 0 4 9 0 0 0
0 0 0 0 0 0 0
0 0 1 0 1 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0

# 55
6
2 9 6 2 5 6
5 1 0 4 0 0
5 3 1 4 0 5
2 0 6 4 1 0
0 2 1 5 1 5
1 2 2 6 4 6 

# 48
6
0 4 4 3 0 6
0 0 3 5 4 2
1 4 1 3 6 2
0 0 2 1 9 0
1 3 5 4 6 0
2 5 6 2 1 0 

# 58
6
3 5 5 1 6 3
0 6 0 6 5 1
9 5 0 0 0 4
2 1 0 3 0 4
6 0 1 1 1 4
1 6 0 1 0 1

# 55
6
1 1 1 4 3 0
3 0 0 6 1 0
2 9 6 2 5 5
6 2 1 0 6 5
5 5 0 1 6 0
3 1 2 0 4 1

# 63
6
3 6 6 1 5 3
1 6 1 5 2 4
6 1 2 2 1 5
4 0 0 1 6 3
2 0 5 4 0 0
1 0 9 0 0 3

# 0
6
1 2 0 3 1 6
1 0 5 0 0 0
1 0 2 0 2 0
0 1 4 0 2 5
6 6 3 0 3 3
4 9 6 0 2 2

# 103
10
0 1 4 6 1 4 5 4 0 3
2 0 0 9 0 0 6 0 0 0
4 3 2 4 6 3 0 2 1 6
0 0 0 0 1 0 0 1 0 6
0 0 0 6 0 4 1 4 0 1
0 3 0 1 6 0 3 1 0 4
6 5 0 2 0 0 5 1 0 1
0 4 0 4 1 1 2 5 6 6
1 0 5 6 5 1 0 1 2 0
5 6 3 0 6 0 1 1 6 0

# 105
10
5 6 3 0 5 5 4 4 3 0
2 4 0 4 0 1 0 1 0 6
0 3 4 1 0 0 3 1 1 0
0 5 1 0 1 6 1 3 5 1
0 3 0 1 1 0 4 0 1 0
0 5 1 5 6 0 3 4 0 9
0 5 5 3 0 0 4 5 0 3
2 5 0 3 3 2 0 0 3 2
2 6 5 0 0 4 1 1 6 3
1 3 1 3 0 1 0 0 0 5

# 102
10
5 3 2 0 0 1 2 0 4 0
3 0 3 1 0 0 3 0 6 1
0 3 0 5 0 5 4 4 2 5
3 0 0 3 0 6 1 5 4 2
1 0 2 0 2 0 3 0 0 6
1 1 1 1 1 1 1 1 0 0
2 0 2 1 9 6 0 0 4 3
1 6 1 0 6 0 5 0 1 0
6 5 4 0 1 2 1 3 5 0
0 1 6 6 1 4 3 0 1 1 

# 87
10
2 0 2 0 1 1 1 0 1 0
0 4 4 0 4 0 0 0 3 0
4 3 5 0 1 0 2 6 0 0
0 0 5 5 3 1 3 1 3 4
6 0 5 1 4 2 4 0 5 0
0 0 5 0 2 1 1 2 1 0
2 0 5 2 4 0 9 1 6 2
4 1 2 0 3 0 3 2 4 6
3 0 1 0 4 0 0 5 0 1
0 4 1 1 6 6 1 6 0 0 

# 913
20
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 3 4 4
0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
9 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 3 3 4 4
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 4
"""